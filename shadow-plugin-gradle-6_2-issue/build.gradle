plugins {
	id 'java'
	id "maven-publish"
	id "ivy-publish"
	id "com.github.johnrengelman.shadow" version "5.2.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'com.google.guava:guava:19.0'
}


shadowJar {
	classifier 'all'// this configuration is used to produce only the shadowed jar
	relocate 'com.google', 'com.netflix.shading.google'
}

configurations {
	[apiElements, runtimeElements].each {
		it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
		it.outgoing.artifact(shadowJar)
	}
}

jar {
	enabled = true // this configuration is used to produce only the shadowed jar
}

jar.dependsOn shadowJar // this configuration is used to produce only the shadowed jar


publishing {
	publications {
		myShadowJar(IvyPublication) {
			artifact shadowJar
			module = "sample-shaded"
		}
		maven(MavenPublication) {
			groupId = 'com.example'
			artifactId = 'demo'
			version = '0.0.1-SNAPSHOT'
			from components.java
		}
		ivy(IvyPublication) {
			organisation = 'com.example'
			module = 'demo'
			revision = '0.0.1-SNAPSHOT'
			from components.java
			descriptor.status = 'milestone'
			descriptor.branch = 'testing'
			descriptor.extraInfo 'http://my.namespace', 'myElement', 'Some value'
			repositories {
				ivy {
					// change to point to your repo, e.g. http://my.org/repo
					url = "$buildDir/ivyrepo"
				}
			}
		}
	}
}


afterEvaluate {
	publishing {
		publications {
			// to remove shaded dependency from ivy.xml
			withType(IvyPublication) {
				descriptor.withXml {
					asNode()
							.dependencies
							.dependency
							.findAll {
								it.@name == "guava"
							}
							.each { it.parent().remove(it) }
				}
			}
			// to remove shaded dependency from pom.xml
			withType(MavenPublication) {
				pom.withXml {
					asNode()
							.dependencies
							.dependency
							.findAll {
								it.artifactId.text() == "guava"
							}
							.each { it.parent().remove(it) }
				}
			}
		}
	}
}
